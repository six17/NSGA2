ros教程：
http://wiki.ros.org/cn/ROS/Tutorials
https://www.aidaxue.com/course/courseDetail?id=392&ch=bdjh-ros02&bd_vid=10050555582088818694

1.创建工作空间与功能包

创建工作空间
mkdir -p ~/catkin_ws/src
cd ~/catkin_ws/src
catkin_init_workspace

编译工作空间
cd ~/catkin_ws/
catkin_make

设置环境变量
source devel/setup.bash

********
避免每次设置环境变量方法：
终端输入：
gedit ~/.bashrc
将下面命令粘贴到最下面的位置
source ~/catkin_ws/devel/setup.bash
或者使用
echo “source ~/catkin_ws/devel/setup.bash” >> ~/.bashrc
********

创建功能包
cd ~/catkin_ws/src
catkin_create_pkg pub_sub_test std_msgs rospy roscpp

编译功能包
cd ~/catkin_ws
catkin_make pub_sub_test
source devel/setup.bash


2.发布者publisher的编程实现
-初始化ROS节点
-向ROS Master 注册节点信息包括发布的话题名和话题中的消息类型
-创建消息数据
-按照一定频率循环发布消息

以python为例:

创建编程文件
在需要创建的文件夹中打开终端
gedit pub.py

文件内容：

#!/usr/bin/env python

import rospy
from std_msgs.msg import Float32MultiArray
#消息类型为std_msgs.msg::Float32MultiArray
def talker():
    pub = rospy.Publisher('chatter_1', Float32MultiArray, queue_size=1)
    #创建publisher，topic名为chatter_1，消息类型为std_msgs.msg::Float32MultiArray，队列长度用于在订阅者接收消息的速度不够快的情况下，限制排队的消息数量，但为了接受最新的消息，应当设置为1
    rospy.init_node('talker', anonymous=True)
    #节点初始化，节点名为‘talker’,anonymous = True会让名称末尾添加随机数，来确保节点具有唯一的名称
    rate = rospy.Rate(10) # 10hz
    #设置速率，每秒循环10次
    while not rospy.is_shutdown():
	      array=[5,5,1,1]        
	      msg=Float32MultiArray(data=array)
        #初始化消息
        rospy.loginfo(msg)
        #打印消息到屏幕上；把消息写入节点的日志文件中；写入rosout
        pub.publish(msg)
        #发布消息
        rate.sleep()

if __name__ == '__main__':
    try:
        talker()
    except rospy.ROSInterruptException:
        pass
        
右键文件-权限-勾选允许作为程序执行文件

3.订阅者Subscruber的编程实现
-初始化ROS节点
-订阅需要的话题
-循环等待话题消息，接收到消息后进入回调函数
-在回调函数中完成消息处理

以python为例:

创建编程文件
在需要创建的文件夹中打开终端
gedit sub.py

文件内容：

#!/usr/bin/env python
import rospy
from std_msgs.msg import Float32MultiArray

def callback(data):
    rospy.loginfo(rospy.get_caller_id() + "I heard %s", data.data)
    
def listener():

    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber("chatter_2", Float32MultiArray, callback)
    rospy.spin()
    #不让你的节点退出，直到节点被明确关闭
if __name__ == '__main__':
    listener()

右键文件-权限-勾选允许作为程序执行文件

3.在同一个节点同时收发消息
全局变量的方法：

#!/usr/bin/env python
# -*- coding: utf-8 -*-
import rospy
from std_msgs.msg import Float32MultiArray


pub = rospy.Publisher('chatter_2', Float32MultiArray, queue_size=1)  #发布话题设为全局变量

class listener():#接收话题设为类
    def __init__(self):
        rospy.init_node('talk_listener', anonymous=True)
        rospy.Subscriber("chatter_1", Float32MultiArray, self.callback,queue_size = 1)

    def callback(self,data):
	      array=[x+1 for x in data.data]        
	      msg=Float32MultiArray(data=array)
        pub.publish(msg)
	      rospy.loginfo( "I heard %s\nI pub %s", data.data,msg.data)

if __name__ == '__main__':
    listener()
    rospy.spin()
   
右键文件-权限-勾选允许作为程序执行文件

服务端、客户端编写 略
参见：http://wiki.ros.org/cn/ROS/Tutorials/WritingServiceClient%28python%29

4.启动节点
roscore
打开另一终端
cd ~/catkin_ws
catkin_make
source ./devel/setup.bash

rosrun pub_sub_test pub.py

rosrun pub_sub_test pub_sub.py

rosrun pub_sub_test sub.py

一次启动多个节点：
在pub_sub_test文件夹
mkdir launch
cd launch
gedit test.launch

文件内容
<launch>


    <node pkg="pub_sub_test" name="talker" type="pub.py" output="screen"/>
    #pkg功能包名，name节点名，type文件名
    #更多参数见https://wiki.ros.org/roslaunch/XML
    <node pkg="pub_sub_test" name="talk_listener" type="pub_sub.py"/>
    <node pkg="pub_sub_test" name="listener" type="sub.py"/>


</launch>

roscore
打开另一终端
cd ~/catkin_ws
catkin_make
source ./devel/setup.bash
roslaunch pub_sub_test test.launch

5.话题消息
可参考
http://wiki.ros.org/sensor_msgs    主要包含一些与传感器信息读取相关的消息类型
http://wiki.ros.org/geometry_msgs  主要包含一些与机器人运动控制和定位姿态相关的消息类型
http://wiki.ros.org/std_msgs       主要包含一些基础的消息类型格式，是其他类型的基础

自定义消息类型
roscd pub_sub_test
mkdir msg
gedit Num.msg

文件内容：
int64 num

打开package.xml，添加：
<build_depend>message_generation</build_depend>
<exec_depend>message_runtime</exec_depend>

打开CMakeLists.txt添加编译选项
find_package(...... message_generation)

add_message_files(FILES Num.msg)
generate_messages(DEPENDENCIES std_msgs)

catkin_package(...... 
	CATKIN_DEPENDS ...message_runtime)

编译相关文件

查看Num：
rosmsg show Num

服务.srv创建 略
参见：http://wiki.ros.org/cn/ROS/Tutorials/CreatingMsgAndSrv

6.通过命令行查看相关信息
查看当前活跃的节点
rosnode list
查看节点的发布订阅状态
rosnode info
查看当前活跃的话题列表
rostopic list
通过该命令可以查看话题下的消息类型
rostopic type [topic]
查看消息具体是什么
rostopic echo [消息名]
发布消息
rostopic pub [topic] [msg_type] [args]
例：
rostopic pub chatter_1 std_msgs/Float32MultiArray -r 10 "layout:
  dim:
  - label: ''
    size: 0
    stride: 0
  data_offset: 0
data:
-1
-1
-0
-0" 

查看当前活跃的消息列表
rosmsg list
查看消息字段（具体类型）
rosmsg show [消息名]
查看当前活跃的服务列表
rosservice list
查看服务的类型
rosservice type [服务名]
调用服务
rosservice call [服务名] [参数]

7.rqt
计算图可视化
rqt_graph
日志输出工具
rqt_console
数据绘图
rqt_plot

8.参数文件
在catkin_ws文件夹
getid params.yaml

文件内容：
number: 1 

修改pub.py:
params=rospy.get_param('number')
array=[5,params,1,1]

加载参数：
rosparam load params.yaml
如果文件不在catkin_ws文件夹这一级，需要添加路径
或写入launch文件
<rosparam file="$(find readyaml)/params.yaml" command="load"/>
启动pub.py

其他操作：
rosparam set            设置参数
rosparam get            获取参数
rosparam load           从文件中加载参数
rosparam dump           向文件中转储参数
rosparam delete         删除参数
rosparam list           列出参数名

python文件中的编程操作：
rospy.get_param('[name]')
set_param('[name]',[value])
