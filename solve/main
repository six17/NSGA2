import matplotlib.pyplot as plt
import numpy as np
import geatpy as ea
import alorithm_psy as al
from gantt import Gantt
import json
import math
g=2 # 多目标维度（2）

#以下为建模
class Platform:                     # equal to resource
    def __init__(self, platNum, speed, initPos):
        #self.ptype = ptype          # platform type
        self.platNum = platNum      # platform number, from 0 to m
        self.speed = speed          # (average) moving speed, m/s
        self.initPos = initPos      # platform initial position, tuple
    
    def exec_order(self, Tasks, priority):
        # To calculate the execution order for each platform
        # Tasks: all the Tasks in a list
        # priority: the priority-relation among all the Tasks in a list
        Tasks_prior = []
        for prior_ind in priority:
            Tasks_prior.append(Tasks[prior_ind])
        self.execOder = []          # order of task execution (task number) in a list
        self.execPos = []           # execution position, tuple in a list
        for Task in Tasks_prior:
            if Task.resInv[self.platNum] > 0:
                self.execOder.append(Tasks.index(Task))
                self.execPos.append(Task.pos)


class Task0:
    def __init__(self, taskNum, pred, pos, resInv):
        self.taskNum = taskNum      # task number, from 0 to n
        self.pred = pred            # indices of direct predecessors, None or list
        #self.dur = dur              # duration, scaler (calc. by Task.duration(...))
        self.pos = pos              # execution position, tuple
        self.resInv = resInv        # resource/platform invested, nparray, by NSGA
    
    def duration(self, Platforms):
        # To calculte the duration of each Task (first by ED, later by situAware)
        # Platforms: all the platforms in number order in a list
        platTime = []               # time to consume for each platform
        resIdx = np.nonzero(self.resInv)[0]
        for idx in resIdx:
            Platform = Platforms[idx]
            if Platform.execOder.index(self.taskNum) == 0:      # initial position
                platPos = Platform.initPos
            else:
                platPos = Platform.execPos[Platform.execOder.index(self.taskNum)-1] # last task position
            dist = math.sqrt((self.pos[0]-platPos[0])**2+(self.pos[1]-platPos[1])**2)
            time = dist/Platform.speed
            platTime.append(time)
        if platTime==[]:
            self.dur= 9999
        else:
            self.dur = max(platTime)

    def start_time(self, T_pred, T_prior, resAvail):
        # To schedule Task at the earliest feasible time
        # T_pred is the Tasks of the direct predecessors in a list
        # T_prior is all the prior Tasks in a list, by NSGA
        # resAvail is all the resource available in a list/nparray 
        if T_prior is None:
            self.ts = 0                     # Task start time
        else:
            if T_pred is None:
                te_pred_max = 0
            else:
                te_pred = []                # end time of the direct predecessors
                for Task in T_pred:
                    te_pred.append(Task.ts+Task.dur)
                te_pred_max = max(te_pred)  # from te_pred_max on ...
            tste_prior = []
            for Task in T_prior:
                if Task.ts >= te_pred_max:
                    tste_prior.append(Task.ts)
                if Task.ts+Task.dur >= te_pred_max:
                    tste_prior.append(Task.ts+Task.dur)
            tste_prior.sort()
            for beginTime in tste_prior:
                resCsm1 = np.zeros_like(self.resInv) # resource consumed
                for Task in T_prior:
                    if beginTime >= Task.ts and beginTime < Task.ts+Task.dur:               # begin check
                        resCsm1 += Task.resInv
                resCsm1 += self.resInv
                cmpRst1 = (resCsm1 <= resAvail)
                if cmpRst1.all():
                    endTime = beginTime + self.dur
                    errorFlag = 0
                    for middleTime in tste_prior:
                        if middleTime > beginTime and middleTime < endTime:
                            resCsm2 = np.zeros_like(self.resInv)
                            for Task in T_prior:
                                if middleTime >= Task.ts and middleTime < Task.ts+Task.dur: # middle check
                                    resCsm2 += Task.resInv
                            resCsm2 += self.resInv
                            cmpRst2 = (resCsm2 <= resAvail)
                            if cmpRst2.all():
                                continue
                            else:
                                errorFlag = 1
                                break
                    if errorFlag == 0:
                        self.ts = beginTime
                        break


def schedule(Tasks, priority):
    # To calculate the feasible start time for each Task
    # Tasks: all the Tasks in a list
    # priority: the priority-relation among all the Tasks in a list
    Tasks_prior = []
    for prior_ind in priority:
        Tasks_prior.append(Tasks[prior_ind])
    for (ind, Task) in enumerate(Tasks_prior):
        if Task.pred is None:
            T_pred = None
        else:
            T_pred = []
            for i in Task.pred:
                T_pred.append(Tasks[i])
        if ind == 0:
            T_prior = None
        else:
            T_prior = Tasks_prior[:ind]
        Task.start_time(T_pred, T_prior, resAvail)


def calc_makespan(Tasks):
    # To calculate the Makespan
    # Tasks: all the Tasks in a list
    te = []             # end time of all the tasks
    for Task in Tasks:
        te.append(Task.ts+Task.dur)
    return max(te)


def calc_winrate(Tasks, Situation):
    ...


def plot_gantt(Tasks):
    # To draw the Gantt chart of the COA (gantt)
    # Tasks: all the Tasks in a list
    pkg_kvs = []        # key-value in 'packages'
    for Ti, Task in enumerate(Tasks):
        resIdx = np.nonzero(Task.resInv)[0] # platforms invested
        for idx in resIdx:
            kv = {}
            kv['label'] = 'P' + str(idx)    # still have a problem!!!
            kv['task'] = 'T' + str(Ti)
            kv['start'] = Task.ts
            kv['end'] = Task.ts + Task.dur
            pkg_kvs.append(kv)
    data = {'packages': pkg_kvs, 'title': 'Course of Action',
                'xlabel': 'Time'}
    jsData = json.dumps(data, indent=4, separators=(',', ': '))
    filename = 'GanttData.json'
    fileobj = open(filename, 'w')
    fileobj.write(jsData)
    fileobj.close()
    gt = Gantt('./'+filename)
    gt.render()
    gt.show()
#建模用到的函数

#任务顺序限制，随机生成任务
rd=np.random.RandomState(1) #改变种子数以改变随机
resAvail=rd.randint(3,11,size=1)#多智能体数量随机
R0=resAvail
resAvail=[1]*resAvail[0]
print(resAvail)
tasknum=rd.randint(4,11,size=1)#任务数量随机
pos=rd.randint(0,51,(tasknum[0],2))#任务位置随机
print(pos)
mapmatrix=rd.randint(0,2,(tasknum[0],tasknum[0]))#任务顺序限制随机
mapmatrix=np.triu(mapmatrix,1)
print(mapmatrix)
v=rd.random((1,R0[0]))*5+0.5
print(v)
workmap=list()

for i in range (0,tasknum[0]):
    a=np.where(mapmatrix[:,i]==1)

    b=list()
    for i in range (0,np.size(a)):
        b.append(a[0][i]+1)
    workmap.append(b)   
workmap=np.array([x for x in workmap])#将任务顺序限制由图的方式进行转换
print(workmap)



#任务生成函数，由优先矩阵和任务顺序限制生成任务排序顺序
def workrank(vars,workmap):
    size=np.size(vars)
    size1=size
    rank=np.array([0]*size)
    for i in range(0,size):
        for j in range(0,size1):
            flag=0 
            for k in range(0,np.size(workmap[vars[j]-1])):
                if workmap[vars[j]-1][k] not in rank:
                    flag=1     
                    break
            if flag == 0:
                rank[i]=vars[j]
                vars=np.delete(vars,j)
                size1=size1-1
                break               
    return rank             
        

# 自定义问题类
class MyProblem(ea.Problem): # 继承Problem父类
    def __init__(self, M,workmap,R0):
        name = 'nsga2' # 初始化name（函数名称，可以随意设置）
        maxormins = [1] * M # 初始化maxormins（目标最小最大化标记列表，1：最小化该目标；-1：最大化该目标）
        Dim = np.size(workmap)+ np.size(workmap) * R0[0] +g# 初始化Dim（决策变量维数）
        varTypes = np.array([1] * Dim) # 初始化varTypes（决策变量的类型，0：实数；1：整数）
        lb = [0]*(np.size(workmap)+g)+[-1]* (np.size(workmap) * R0[0])
        # 决策变量下界
        ub = [np.size(workmap)] * np.size(workmap)
        ub=ub+[1]*(R0[0]* np.size(workmap))
        ub=[1]*g+ub
        # 决策变量上界
        lbin = [0] * Dim # 决策变量下边界
        ubin = [1] * Dim # 决策变量上边界
        # 调用父类构造方法完成实例化
        ea.Problem.__init__(self, name, M, maxormins, Dim, varTypes, lb, ub, lbin, ubin)
    def aimFunc(self, pop): # 目标函数
        Vars = pop.Phen # 得到决策变量矩阵
        f=Vars[:,0:g]
        #Vars = np.array([[1,1,1,2,3,4,1,1,1,1,1,1,1,1,1,1,1,1]]) 
        for i in range (0,Vars.shape[0]):

            rank=workrank(Vars[i,g:np.size(workmap)+g].astype('int64'),workmap)
            priority=rank-1
            r=Vars[i,np.size(workmap)+g:self.Dim].reshape(np.size(workmap),R0[0])

            rs=8/(np.sum(r)+1)#指标2，这里用资源和倒数简单代替
            resInv=[]
            for j in range(0,tasknum[0]):
              
                resInv.append(np.array([x for x in r[j,:]]))   
            Tasks=[]
            for k in range (0,tasknum[0]):
                if workmap[k]==[]:
                    Tasks.append(Task0(k,None,pos[k,:],resInv[k]))
                else:
                    Tasks.append(Task0(k,[x-1 for x in workmap[k]],pos[k,:],resInv[k]))
            Plaforms=[]
            for m in range(0,R0[0]):
                P = Platform(m, v[0][m], (0,0))
                P.exec_order(Tasks, priority)
                Plaforms.append(P)

            for Task in Tasks:
                Task.duration(Plaforms)
            schedule(Tasks, priority)     

            f[i,:]=[calc_makespan(Tasks),rs]

        pop.ObjV = f # 把求得的目标函数值赋值给种群pop的ObjV


            





# 编写执行代码
"""===============================实例化问题对象=============================="""
M = 2                    # 设置目标维数
problem = MyProblem(M,workmap,R0)    # 生成问题对象
"""==================================种群设置================================="""
Encodings = ['RI','P','RI']           # 编码方式
NIND = 50               # 种群规模
Field0 = ea.crtfld(Encodings[0], problem.varTypes[:g],problem.ranges[:,:g], problem.borders[:,:g])
Field1 = ea.crtfld(Encodings[1], problem.varTypes[g:np.size(workmap)+g],problem.ranges[:,g:np.size(workmap)+g], problem.borders[:,g:np.size(workmap)+g])
Field2 = ea.crtfld(Encodings[2], problem.varTypes[np.size(workmap)+g:],problem.ranges[:,np.size(workmap)+g:], problem.borders[:,np.size(workmap)+g:])
Fields = [Field0, Field1, Field2]
population = ea.PsyPopulation(Encodings, Fields, NIND) # 实例化种群对象（此时种群还没被初始化，仅仅是完成种群对象的实例化）
"""================================算法参数设置==============================="""
myAlgorithm = al.moea_psy_NSGA2_templet(problem, population) # 实例化一个算法模板对象
myAlgorithm.MAXGEN = 500 # 最大进化代数
myAlgorithm.logTras = 1# 设置每多少代记录日志，若设置成0则表示不记录日志
myAlgorithm.verbose = False#True# # 设置是否打印输出日志信息
myAlgorithm.drawing = 0   # 设置绘图方式（0：不绘图；1：绘制结果图；2：绘制过程动画）
"""==========================调用算法模板进行种群进化=========================
调用run执行算法模板，得到帕累托最优解集NDSet以及最后一代种群。NDSet是一个种群类Population的对象。
NDSet.ObjV为最优解个体的目标函数值；NDSet.Phen为对应的决策变量值。
详见Population.py中关于种群类的定义。
"""
[NDSet, population] = myAlgorithm.run() # 执行算法模板，得到非支配种群以及最后一代种群




x=NDSet.ObjV[:,0]
#去重
y=NDSet.ObjV[:,1]
xy=x+y*1j
n=np.unique(xy,return_index=True)[1]
NDSet=NDSet[n]
print(NDSet.ObjV[:,0])
# x=NDSet.ObjV[:,0]
# m1=np.where(x<100)
# y=NDSet.ObjV[:,1]
# m2=np.where(y<100)
# m = np.intersect1d(m1,m2)
# NDSet=NDSet[m]

#choose，筛选5个方案
ymax=NDSet.ObjV[0,1]
ymin=NDSet.ObjV[NDSet.ObjV.shape[0]-1,1]
plannum=5
planset=[0]*plannum
for i in range(0,plannum):
    planset[i]=np.argmin(abs(NDSet.ObjV[:,1]-ymin-(plannum-i-1)*(ymax-ymin)/(plannum-1)))
print(planset)
NDSet=NDSet[planset]
print(NDSet.ObjV[:,0])
print(NDSet.Phen)
#输出
for i in range (0,NDSet.ObjV.shape[0]): 
    
    rank=workrank(NDSet.Phen[i,g:np.size(workmap)+g].astype('int64'),workmap) 
    priority=rank-1
    r=NDSet.Phen[i,np.size(workmap)+g:np.size(workmap)+ np.size(workmap) * R0[0] +g].reshape(np.size(workmap),R0[0])
    print(priority)

    resInv=[]
    for j in range(0,tasknum[0]):
        
        resInv.append(np.array([x for x in r[j,:]]))

    Tasks=[]

    for k in range (0,tasknum[0]):
        if workmap[k]==[]:
            Tasks.append(Task0(k,None,pos[k,:],resInv[k]))
        else:
            Tasks.append(Task0(k,[x-1 for x in workmap[k]],pos[k,:],resInv[k]))
    Plaforms=[]
    for m in range(0,R0[0]):
        P = Platform(m, v[0][m], (0,0))
        P.exec_order(Tasks, priority)
        Plaforms.append(P)
    for Task in Tasks:
        Task.duration(Plaforms)
    schedule(Tasks, priority)    
    for n in range (0,tasknum[0]):
        print(Tasks[n].ts)
    print(r)
    print(calc_makespan(Tasks))
    plot_gantt(Tasks)
NDSet.save()  # 把非支配种群的信息保存到文件中
"""==================================输出结果=============================="""
print('用时：%f 秒' % myAlgorithm.passTime)
print('评价次数：%d 次' % myAlgorithm.evalsNum)
print('非支配个体数：%d 个' % NDSet.sizes) if NDSet.sizes != 0 else print('没有找到可行解！')


#按“esc”中断计算
#可视化部分见alorithom_psy








